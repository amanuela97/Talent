generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId         String         @id @default(uuid())
  name           String
  email          String         @unique
  passwordHash   String
  role           Role           @default(CUSTOMER)
  profilePicture String?
  authProvider   AuthProvider   @default(CREDENTIALS) 
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  resetToken     String?        @unique
  resetTokenExpiry DateTime?
  accounts       Account[]
  admin          Admin?
  customer       Customer?
  talent         Talent?
  bookings       EventBooking[]
  reviews        Review[]
}

model Account {
  id                 Int      @id @default(autoincrement())
  provider           String
  providerAccountId  String
  accessToken        String
  expiresAt          Int?
  userId             String   @unique
  user              User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Talent {
  talentId            String     @id @default(uuid())
  bio                 String
  services            String[]
  hourlyRate          Float
  location            String
  availability        Json
  rating              Float      @default(0)
  socialLinks         Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  media               Media[]
  reviews             Review[]
  user                User       @relation(fields: [talentId], references: [userId])
  favoriteByCustomers Customer[] @relation("FavoriteTalents")
}

model Media {
  id          String   @id @default(cuid())
  type        MediaType
  url         String
  publicId    String
  description String?
  talentId   String
  talent     Talent  @relation(fields: [talentId], references: [talentId])
  createdAt   DateTime @default(now())
}

enum MediaType {
  VIDEO
  IMAGE
  AUDIO
}

model Customer {
  customerId      String         @id @default(uuid())
  phoneNumber     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [customerId], references: [userId])
  eventHistory    EventBooking[]
  favoriteTalents Talent[]       @relation("FavoriteTalents")
}

model Admin {
  adminId     String   @id @default(uuid())
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [adminId], references: [userId])
}

model Review {
  reviewId       String   @id @default(uuid())
  userRevieweId  String
  talentReviewId String
  rating         Float
  comment        String
  createdAt      DateTime @default(now())
  replies        Reply[]
  talent         Talent   @relation(fields: [talentReviewId], references: [talentId])
  user           User     @relation(fields: [userRevieweId], references: [userId])
}

model Reply {
  replyId       String   @id @default(uuid())
  comment       String
  createdAt     DateTime @default(now())
  reviewReplyId String
  review        Review   @relation(fields: [reviewReplyId], references: [reviewId])
}

model EventBooking {
  bookingId         String   @id @default(uuid())
  userBookingId     String
  customerBookingId String
  date              DateTime
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  customer          Customer @relation(fields: [customerBookingId], references: [customerId])
  user              User     @relation(fields: [userBookingId], references: [userId])
}

enum Role {
  TALENT
  CUSTOMER
  ADMIN
}

enum AuthProvider {
  GOOGLE
  CREDENTIALS
}
