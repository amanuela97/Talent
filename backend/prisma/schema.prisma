generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId           String               @id @default(uuid())
  name             String
  email            String               @unique
  passwordHash     String
  role             Role                 @default(CUSTOMER)
  profilePicture   String
  authProvider     AuthProvider         @default(CREDENTIALS)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  resetToken       String?              @unique
  resetTokenExpiry DateTime?
  accounts         Account[]
  admin            Admin?
  customer         Customer?
  talent           Talent?
  bookings         EventBooking[]
  reviews          Review[]
  messages         Message[]            @relation("UserMessages")
  conversations    UserOnConversation[]
  readStatuses     MessageReadStatus[] // NEW: read receipts by this user
}

model Account {
  id                Int    @id @default(autoincrement())
  provider          String
  providerAccountId String
  accessToken       String
  expiresAt         Int?
  userId            String @unique
  user              User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// Removed invalid type definition as it is not supported in Prisma schema

model Talent {
  talentId             String           @id @default(uuid())
  firstName            String
  lastName             String
  talentProfilePicture String
  serviceName          String           @unique
  address              String
  phoneNumber          String
  bio                  String?
  status               TalentStatus     @default(PENDING)
  rejectionReason      String? // Added to store reason for rejection
  email                String           @unique
  isEmailVerified      Boolean          @default(false)
  verificationToken    String
  services             String[]         @default([])
  hourlyRate           Float?
  city                 String?
  availability         Json?
  isOnline             Boolean?         @default(false)
  isPublic             Boolean?         @default(false)
  languagesSpoken      String[]         @default([])
  rating               Float            @default(0)
  socialLinks          Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  media                Media[]
  reviews              Review[]
  bookings             EventBooking[]
  user                 User             @relation(fields: [talentId], references: [userId])
  favoriteByCustomers  Customer[]       @relation("FavoriteTalents")
  calendarEvents       CalendarEvent[]
  categories           TalentCategory[]
}

enum TalentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Media {
  id          String    @id @default(cuid())
  type        MediaType
  url         String
  publicId    String
  description String?
  talentId    String
  talent      Talent    @relation(fields: [talentId], references: [talentId])
  createdAt   DateTime  @default(now())
}

enum MediaType {
  VIDEO
  IMAGE
  AUDIO
}

model Customer {
  customerId      String         @id @default(uuid())
  phoneNumber     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [customerId], references: [userId])
  eventHistory    EventBooking[]
  favoriteTalents Talent[]       @relation("FavoriteTalents")
}

model Admin {
  adminId     String   @id @default(uuid())
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [adminId], references: [userId])
}

model Review {
  reviewId       String   @id @default(uuid())
  userRevieweId  String
  talentReviewId String
  rating         Float
  comment        String
  createdAt      DateTime @default(now())
  replies        Reply[]
  talent         Talent   @relation(fields: [talentReviewId], references: [talentId])
  user           User     @relation(fields: [userRevieweId], references: [userId])
}

model Reply {
  replyId       String   @id @default(uuid())
  comment       String
  createdAt     DateTime @default(now())
  reviewReplyId String
  review        Review   @relation(fields: [reviewReplyId], references: [reviewId])
}

model EventBooking {
  bookingId           String        @id @default(uuid())
  talentId            String
  clientId            String
  eventType           String
  equipmentNeeded     String? // What equipment will you need the performer to provide?
  guestCount          Int? // How many guests are you expecting at the event?
  location            String // Event Location/Address
  eventDate           DateTime // Event Date
  eventTime           String? // Event Time
  duration            Int // Duration in hours
  budgetRange         String? // Budget range selected
  budgetAmount        Float? // Specific budget amount if provided
  serviceRequirements String[] // Specific services needed
  additionalComments  String? // Notes/Questions
  status              BookingStatus @default(PENDING)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  talent              Talent        @relation(fields: [talentId], references: [talentId])
  client              User          @relation(fields: [clientId], references: [userId])
  customer            Customer?     @relation(fields: [customerId], references: [customerId])
  customerId          String?
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum Role {
  TALENT
  CUSTOMER
  ADMIN
}

enum AuthProvider {
  GOOGLE
  CREDENTIALS
}

model Conversation {
  id           String               @id @default(uuid())
  participants UserOnConversation[]
  messages     Message[]
  updatedAt    DateTime             @updatedAt
  createdAt    DateTime             @default(now())

  // Optional: add group chat features
  name       String? // group chat name (null for 1-on-1)
  isGroup    Boolean @default(false)
  groupImage String? // optional image for group
}

model UserOnConversation {
  id             String @id @default(uuid())
  userId         String
  conversationId String

  user         User         @relation(fields: [userId], references: [userId])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             String   @id @default(uuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime @default(now())

  sender       User                @relation("UserMessages", fields: [senderId], references: [userId])
  conversation Conversation        @relation(fields: [conversationId], references: [id])
  readStatuses MessageReadStatus[] // NEW: track read status per user
}

model MessageReadStatus {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [userId])

  @@unique([messageId, userId]) // prevent duplicate read tracking
}

enum CalendarEventType {
  AVAILABLE
  UNAVAILABLE
  BOOKED
}

model CalendarEvent {
  id         String            @id @default(uuid())
  talentId   String
  type       CalendarEventType // "available" | "unavailable" | "booked" | etc.
  title      String
  start      DateTime
  end        DateTime
  color      String? // For frontend customization
  clientName String? // Optional client name for private reference
  isAllDay   Boolean           @default(false)
  talent     Talent            @relation(fields: [talentId], references: [talentId])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Category {
  id        String           @id @default(uuid())
  name      String
  type      CategoryType
  parentId  String? // For specifics, link to general category
  parent    Category?        @relation("ParentCategory", fields: [parentId], references: [id])
  children  Category[]       @relation("ParentCategory")
  status    CategoryStatus   @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  talents   TalentCategory[]
}

enum CategoryType {
  GENERAL
  SPECIFIC
}

enum CategoryStatus {
  ACTIVE
  PENDING
  REJECTED
}

model TalentCategory {
  id         String   @id @default(uuid())
  talent     Talent   @relation(fields: [talentId], references: [talentId])
  talentId   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime @default(now())

  @@unique([talentId, categoryId])
}
